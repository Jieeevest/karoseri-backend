generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id              Int                 @id @default(autoincrement())
  name            String              
  description     String?
  status          String?
  employees       Employee[]          @relation("RoleToEmployees")
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}
model Group {
  id              Int                 @id @default(autoincrement())
  name            String              
  description     String?
  status          String?
  employees       Employee[]          @relation("GroupToEmployees")
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}
model Position {
  id              Int                 @id @default(autoincrement())
  name            String              
  description     String?
  status          String?
  employees       Employee[]          @relation("PositionToEmployees")
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model Employee {
  id              Int                 @id @default(autoincrement())
  nik             String?             @unique
  fullName        String?
  email           String              
  phoneNumber     String?
  password        String?
  employeeNumber  String?             @unique
  profileImage    String?             @default("")
  joinedDate      DateTime?
  resignedDate    DateTime?
  homeAddress     String?
  birthPlace      String?
  birthDate       DateTime?
  gender          String?
  nationality     String?
  religion        String?
  maritalStatus   String?             @default("")
  positionId      Int
  position        Position            @relation("PositionToEmployees", fields: [positionId], references: [id])
  roleId          Int
  role            Role                @relation("RoleToEmployees", fields: [roleId], references: [id])
  groupId         Int
  group           Group               @relation("GroupToEmployees", fields: [groupId], references: [id])
  activityLogs    ActivityLog[]       @relation("EmployeeToActivityLogs")
  status          String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model Inventory {
  id              Int                 @id @default(autoincrement())
  name            String?
  amount          Int                 @default(0)
  typeId          Int
  type            Type                @relation("TypeToInventory", fields: [typeId], references: [id])
  categoryId      Int
  category        Category            @relation("CategoryToInventory", fields: [categoryId], references: [id])
  locationId      Int 
  location        SavingLocation      @relation("LocationToInventory", fields: [locationId], references: [id])
  minimumStock    Int                 @default(0)
  description     String?
  requestItem     RequestItems[]      @relation("RequestItemsToInventory")
  inboundItem     InboundItems[]      @relation("InboundItemsToInventory")
  outboundItem    OutboundItems[]     @relation("OutboundItemsToInventory")
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model Supplier {
  id              Int                 @id @default(autoincrement())
  name            String?
  category        String?
  bank            String?
  bankNumber      String?
  bankOwner       String?
  phoneNumber     String?
  phoneNumberAlt  String?
  email           String?
  homeAddress     String?
  totalDebt       Int?                @default(0)
  request         Request[]           @relation("SupplierToRequest")
  inbound         Inbound[]           @relation("SupplierToInbound")
  outbound        Outbound[]          @relation("SupplierToOutbound")
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model Type {
  id              Int                 @id @default(autoincrement())
  name            String?
  description     String?
  inventory       Inventory[]         @relation("TypeToInventory")
  requestItems    RequestItems[]      @relation("TypeToRequestItems")
  inboundItems    InboundItems[]      @relation("TypeToInboundItems")
  outboundItems   OutboundItems[]     @relation("TypeToOutboundItems")
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}
model Category {
  id              Int                 @id @default(autoincrement())
  name            String?
  description     String?
  inventory       Inventory[]         @relation("CategoryToInventory")
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}
model SavingLocation {
  id              Int                 @id @default(autoincrement())
  name            String?
  description     String?
  inventory       Inventory[]         @relation("LocationToInventory")
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}
model Vehicle {
  id              Int                 @id @default(autoincrement())
  showroomName    String?
  ownerName       String?
  expeditionName  String?
  merk            String?
  series          String?
  color           String?
  type            String?
  chasisNumber    String?
  machineNumber   String?
  description     String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}
model Request {
  id              Int                 @id @default(autoincrement())
  requestItem     RequestItems[]      @relation("RequestToRequestItems")
  incomingDate    DateTime
  supplierId      Int
  supplier        Supplier            @relation("SupplierToRequest", fields: [supplierId], references: [id])
  submitter       Int
  approver        Int
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt  
}
model RequestItems {
  id              Int                 @id @default(autoincrement())
  requestId       Int
  request         Request             @relation("RequestToRequestItems", fields: [requestId], references: [id])
  inventoryId     Int
  inventory       Inventory           @relation("RequestItemsToInventory", fields: [inventoryId], references: [id])
  amount          Int
  typeId          Int
  type            Type                @relation("TypeToRequestItems", fields: [typeId], references: [id])
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}
model Inbound {
  id              Int                 @id @default(autoincrement())
  inboundItem     InboundItems[]      @relation("InboundToInboundItems")
  incomingDate    DateTime
  deliveryNumber  String?
  supplierId      Int
  supplier        Supplier            @relation("SupplierToInbound", fields: [supplierId], references: [id])
  receiver        Int
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt  
}
model InboundItems {
  id              Int                 @id @default(autoincrement())
  inboundId       Int
  inbound         Inbound             @relation("InboundToInboundItems", fields: [inboundId], references: [id])
  inventoryId     Int
  inventory       Inventory           @relation("InboundItemsToInventory", fields: [inventoryId], references: [id])
  amount          Int
  typeId          Int
  type            Type                @relation("TypeToInboundItems", fields: [typeId], references: [id])
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}
model Outbound {
  id              Int                 @id @default(autoincrement())
  outboundItems   OutboundItems[]     @relation("OutboundToOutboundItems")
  outcomingDate   DateTime
  deliveryNumber  String?
  supplierId      Int
  supplier        Supplier            @relation("SupplierToOutbound", fields: [supplierId], references: [id])
  submitter       Int
  approver        Int
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt  
}
model OutboundItems {
  id              Int                 @id @default(autoincrement())
  outboundId      Int
  outbound        Outbound            @relation("OutboundToOutboundItems", fields: [outboundId], references: [id])
  inventoryId     Int
  inventory       Inventory           @relation("OutboundItemsToInventory", fields: [inventoryId], references: [id])
  amount          Int
  typeId          Int
  type            Type                @relation("TypeToOutboundItems", fields: [typeId], references: [id])
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model ActivityLog {
  id              Int                 @id @default(autoincrement())
  activity        String
  timestamp       DateTime            @default(now())
  employeeId      Int                 @unique
  employee        Employee            @relation("EmployeeToActivityLogs", fields: [employeeId], references: [id])
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model ErrorLog {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?
  timestamp       DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
